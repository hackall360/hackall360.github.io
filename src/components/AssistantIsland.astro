---
const apiUrl = import.meta.env.PUBLIC_ASSISTANT_API_URL ?? '';
const apiToken = import.meta.env.PUBLIC_ASSISTANT_API_KEY ?? '';
const assistantEnabled = Boolean(apiUrl && apiToken);
---

<div class="space-y-6">
  <div class="space-y-2">
    <h2 class="text-2xl font-semibold text-white">AI portfolio assistant</h2>
    <p class="text-sm text-slate-300">
      Ask about recent work, facilitation rituals, or how HackAll360 approaches platform challenges. Responses are generated by a
      hosted inference API and respect the guardrails configured for this prototype.
    </p>
  </div>
  {assistantEnabled ? (
    <div class="space-y-4" data-assistant-root>
      <form
        class="space-y-3 rounded-2xl border border-slate-800/60 bg-slate-950/50 p-4"
        data-assistant-form
        data-api-url={apiUrl}
        data-api-token={apiToken}
      >
        <label class="flex flex-col gap-2 text-sm text-slate-200">
          <span class="font-semibold uppercase tracking-[0.3em] text-accent-light">Prompt</span>
          <textarea
            class="min-h-[120px] rounded-xl border border-slate-700/60 bg-slate-900/60 px-4 py-3 text-sm text-slate-100 focus:border-accent/60 focus:outline-none focus:ring-2 focus:ring-accent/40"
            name="prompt"
            placeholder="Ask about migration strategies or team rituals..."
            required
          ></textarea>
        </label>
        <div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div class="flex items-center gap-2 text-xs text-slate-400">
            <span class="inline-flex h-2 w-2 rounded-full bg-emerald-400"></span>
            <span>Prototype mode â€” expect concise summaries.</span>
          </div>
          <button
            type="submit"
            class="inline-flex items-center justify-center gap-2 rounded-xl border border-accent/60 bg-accent/20 px-4 py-2 text-xs font-semibold uppercase tracking-[0.3em] text-accent-light transition hover:bg-accent/30"
          >
            Ask the assistant
          </button>
        </div>
      </form>
      <div class="min-h-[140px] rounded-2xl border border-slate-800/60 bg-slate-950/40 p-4 text-sm text-slate-200" data-assistant-response>
        <p class="text-slate-400">The assistant will summarize insights here.</p>
      </div>
    </div>
  ) : (
    <div class="space-y-3 rounded-2xl border border-slate-800/60 bg-slate-950/40 p-4 text-sm text-slate-300">
      <p>
        Set <code class="rounded bg-slate-800 px-2 py-1 text-[0.65rem] uppercase tracking-[0.3em] text-accent-light">PUBLIC_ASSISTANT_API_URL</code>
        and <code class="rounded bg-slate-800 px-2 py-1 text-[0.65rem] uppercase tracking-[0.3em] text-accent-light">PUBLIC_ASSISTANT_API_KEY</code>
        to enable the assistant. Without them, the UI remains in safe standby mode.
      </p>
      <p class="text-xs text-slate-500">
        For production, route requests through a server-side proxy so sensitive credentials stay private.
      </p>
    </div>
  )}
</div>

{assistantEnabled && (
  <script type="module" is:inline>
    const form = document.querySelector('[data-assistant-form]');
    const responseBox = document.querySelector('[data-assistant-response]');

    if (form && responseBox) {
      form.addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(form);
        const prompt = formData.get('prompt');
        const apiUrl = form.dataset.apiUrl;
        const apiToken = form.dataset.apiToken;

        if (!prompt || typeof prompt !== 'string') {
          return;
        }

        const thinking = document.createElement('p');
        thinking.className = 'text-slate-400';
        thinking.textContent = 'Thinking through that prompt...';
        responseBox.replaceChildren(thinking);

        try {
          const res = await fetch(apiUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              Authorization: `Bearer ${apiToken}`
            },
            body: JSON.stringify({
              prompt,
              context: 'portfolio-assistant'
            })
          });

          if (!res.ok) {
            throw new Error(`Request failed with status ${res.status}`);
          }

          const data = await res.json();
          const message = data?.reply ?? 'The assistant returned an empty response.';
          const paragraph = document.createElement('p');
          paragraph.textContent = message;
          responseBox.replaceChildren(paragraph);
        } catch (error) {
          console.error(error);
          const errorParagraph = document.createElement('p');
          errorParagraph.className = 'text-red-300';
          errorParagraph.textContent = 'The assistant is unavailable. Try again later or reach out directly.';
          responseBox.replaceChildren(errorParagraph);
        }
      });
    }
  </script>
)}
