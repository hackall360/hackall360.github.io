---
const DEFAULT_ASSISTANT_API_URL = 'https://text.pollinations.ai/openai';

const configuredApiUrl = import.meta.env.PUBLIC_ASSISTANT_API_URL;
const disabledValues = new Set(['', 'false', '0', 'off']);
const isDisabled =
  typeof configuredApiUrl === 'string' &&
  disabledValues.has(configuredApiUrl.trim().toLowerCase());

const assistantEnabled = !isDisabled;
const apiUrl =
  assistantEnabled && typeof configuredApiUrl === 'string' && configuredApiUrl.trim().length > 0
    ? configuredApiUrl
    : DEFAULT_ASSISTANT_API_URL;
---

<div class="space-y-6">
  <div class="space-y-2">
    <h2 class="text-2xl font-semibold text-white">AI portfolio assistant</h2>
    <p class="text-sm text-slate-300">
      Ask about recent work, facilitation rituals, or how hackall360 approaches platform challenges. Responses are generated by a
      hosted inference API and respect the guardrails configured for this prototype.
    </p>
  </div>
  {assistantEnabled ? (
    <div class="space-y-4" data-assistant-root>
      <form
        class="space-y-3 rounded-2xl border border-slate-800/60 bg-slate-950/50 p-4"
        data-assistant-form
        data-api-url={apiUrl}
      >
        <label class="flex flex-col gap-2 text-sm text-slate-200">
          <span class="font-semibold uppercase tracking-[0.3em] text-accent-light">Prompt</span>
          <textarea
            class="min-h-[120px] rounded-xl border border-slate-700/60 bg-slate-900/60 px-4 py-3 text-sm text-slate-100 focus:border-accent/60 focus:outline-none focus:ring-2 focus:ring-accent/40"
            name="prompt"
            placeholder="Ask about migration strategies or team rituals..."
            required
          ></textarea>
        </label>
        <div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div class="flex items-center gap-2 text-xs text-slate-400">
            <span class="inline-flex h-2 w-2 rounded-full bg-emerald-400"></span>
            <span>Prototype mode â€” expect concise summaries.</span>
          </div>
          <button
            type="submit"
            class="inline-flex items-center justify-center gap-2 rounded-xl border border-accent/60 bg-accent/20 px-4 py-2 text-xs font-semibold uppercase tracking-[0.3em] text-accent-light transition hover:bg-accent/30 focus-visible:outline-none focus-visible:focus-ring-accent"
          >
            Ask the assistant
          </button>
        </div>
      </form>
      <div class="min-h-[140px] rounded-2xl border border-slate-800/60 bg-slate-950/40 p-4 text-sm text-slate-200" data-assistant-response>
        <p class="text-slate-400">The assistant will summarize insights here.</p>
      </div>
    </div>
  ) : (
    <div class="space-y-3 rounded-2xl border border-slate-800/60 bg-slate-950/40 p-4 text-sm text-slate-300">
      <p>
        The assistant automatically enables for requests originating from
        <span class="whitespace-nowrap text-white">hackall360.github.io</span> via the Pollinations referrer fallback.
        Provide
        <code class="rounded bg-slate-800 px-2 py-1 text-[0.65rem] uppercase tracking-[0.3em] text-accent-light">PUBLIC_ASSISTANT_API_URL</code>
        to override the endpoint, or leave it blank to keep the UI disabled.
      </p>
      <p class="text-xs text-slate-500">
        For production, route requests through a server-side proxy so sensitive credentials stay private.
      </p>
    </div>
  )}
</div>

{assistantEnabled && (
  <script type="module" is:inline>
    const form = document.querySelector('[data-assistant-form]');
    const responseBox = document.querySelector('[data-assistant-response]');

    if (form && responseBox) {
      form.addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(form);
        const prompt = formData.get('prompt');
        const baseUrl = form.dataset.apiUrl;

        const normalizeAssistantUrl = (rawUrl) => {
          if (typeof rawUrl !== 'string' || rawUrl.trim().length === 0) {
            return null;
          }

          try {
            const url = new URL(rawUrl);
            const defaultReferrer = 'https://hackall360.github.io';
            const shouldUseWindowOrigin =
              typeof window !== 'undefined' && window.location?.origin === defaultReferrer;
            const referrerValue = shouldUseWindowOrigin
              ? window.location.origin
              : defaultReferrer;

            url.searchParams.set('referrer', referrerValue);

            return url.toString();
          } catch (error) {
            console.warn('Invalid assistant API URL provided.', error);
            return rawUrl;
          }
        };

        const apiUrl = normalizeAssistantUrl(baseUrl);

        if (!apiUrl) {
          console.warn('Assistant request blocked due to missing API URL.');
          return;
        }

        if (!prompt || typeof prompt !== 'string') {
          return;
        }

        const thinking = document.createElement('p');
        thinking.className = 'text-slate-400';
        thinking.textContent = 'Thinking through that prompt...';
        responseBox.replaceChildren(thinking);

        try {
          const systemPrompt = [
            'You are the hackall360 portfolio assistant.',
            'Provide concise summaries about platform reliability work, migrations, facilitation rituals, and active experiments.',
            'Politely decline unrelated requests, avoid inventing commitments, and remind users to verify details with the linked repositories when appropriate.'
          ].join(' ');

          const body = {
            model: 'gpt-4o-mini',
            messages: [
              { role: 'system', content: systemPrompt },
              { role: 'user', content: prompt }
            ],
            temperature: 0.6,
            reasoning_effort: 'medium'
          };

          const res = await fetch(apiUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
          });

          const fallback = 'The assistant returned an empty response.';
          let data = null;

          try {
            data = await res.json();
          } catch (parseError) {
            console.warn('Failed to parse assistant response JSON.', parseError);
          }

          if (!res.ok) {
            const pollinationsMessage = data?.error?.message;
            throw new Error(
              pollinationsMessage && pollinationsMessage.trim().length > 0
                ? pollinationsMessage
                : `Request failed with status ${res.status}`
            );
          }

          const message = data?.choices?.[0]?.message?.content ?? fallback;
          const paragraph = document.createElement('p');
          paragraph.textContent = message;
          responseBox.replaceChildren(paragraph);
        } catch (error) {
          console.error(error);
          const errorParagraph = document.createElement('p');
          errorParagraph.className = 'text-red-300';
          const defaultMessage = 'The assistant is unavailable. Try again later or reach out directly.';
          const extraDetails =
            error instanceof Error && typeof error.message === 'string' && error.message.trim().length > 0
              ? ` Details: ${error.message}`
              : '';
          errorParagraph.textContent = `${defaultMessage}${extraDetails}`;
          responseBox.replaceChildren(errorParagraph);
        }
      });
    }
  </script>
)}
