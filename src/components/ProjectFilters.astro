---
interface Props {
  tags: string[];
}

const { tags } = Astro.props as Props;
---
<section
  data-project-filters
  class="mx-auto flex w-full flex-col gap-4 rounded-2xl border border-slate-800/60 bg-surface-elevated/30 p-6 shadow-lg shadow-slate-900/20"
>
  <div class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
    <h2 class="text-lg font-semibold text-slate-100">Filter by focus area</h2>
    <button
      type="button"
      class="self-start rounded-full border border-transparent px-4 py-2 text-sm font-semibold text-slate-300 transition hover:text-accent-light focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-accent focus-visible:ring-offset-2 focus-visible:ring-offset-slate-900"
      data-clear-filters
    >
      Clear filters
    </button>
  </div>
  <div
    class="flex flex-wrap gap-3"
    role="group"
    aria-label="Toggle project tags"
  >
    {tags.map((tag) => (
      <button
        type="button"
        class="tag-filter inline-flex items-center gap-2 rounded-full border border-slate-700 bg-slate-900/60 px-4 py-2 text-sm font-semibold text-slate-300 transition hover:border-accent hover:text-accent-light focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-accent focus-visible:ring-offset-2 focus-visible:ring-offset-slate-900"
        data-tag={tag.toLowerCase()}
        aria-pressed="false"
      >
        <span
          aria-hidden="true"
          class="indicator size-2 rounded-full bg-slate-600 transition"
        ></span>
        {tag}
      </button>
    ))}
  </div>
</section>

<script is:inline>
  const container = document.currentScript?.parentElement;
  if (!container) {
    throw new Error('ProjectFilters container not found');
  }

  const buttons = Array.from(
    container.querySelectorAll<HTMLButtonElement>('button[data-tag]')
  );
  const clearButton = container.querySelector<HTMLButtonElement>('[data-clear-filters]');

  const toggleButtonState = (button: HTMLButtonElement, active: boolean) => {
    button.setAttribute('aria-pressed', active ? 'true' : 'false');
    button.classList.toggle('border-accent', active);
    button.classList.toggle('text-accent-light', active);
    const indicator = button.querySelector<HTMLElement>('.indicator');
    if (indicator) {
      indicator.classList.toggle('bg-accent-light', active);
      indicator.classList.toggle('bg-slate-600', !active);
    }
  };

  const update = () => {
    const activeTags = buttons
      .filter((button) => button.getAttribute('aria-pressed') === 'true')
      .map((button) => button.dataset.tag ?? '')
      .filter(Boolean);

    container.dispatchEvent(
      new CustomEvent('filtersChange', {
        bubbles: true,
        detail: { activeTags }
      })
    );
  };

  buttons.forEach((button) => {
    button.addEventListener('click', () => {
      const isActive = button.getAttribute('aria-pressed') === 'true';
      toggleButtonState(button, !isActive);
      update();
    });
  });

  clearButton?.addEventListener('click', () => {
    buttons.forEach((button) => {
      toggleButtonState(button, false);
    });
    update();
  });

  update();
</script>
