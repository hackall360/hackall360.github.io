---
import BaseLayout from '~/layouts/BaseLayout.astro';
import { getCollection, getEntry } from 'astro:content';

export async function getStaticPaths() {
  const projects = await getCollection('work');
  return projects.map((project) => ({
    params: { slug: project.slug }
  }));
}

const { slug } = Astro.params;

if (!slug) {
  throw new Error('Expected a slug parameter for project detail page.');
}

const project = await getEntry('work', slug as string);

if (!project) {
  throw new Error(`Project not found for slug: ${slug}`);
}

const { data } = project;
const { Content } = await project.render();

const pageTitle = `${data.title} | Projects | hackall360`;
const pageDescription = data.summary;

const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Projects', href: '/projects' },
  { label: data.title, href: `/projects/${project.slug}` }
];

const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'CreativeWork',
  name: data.title,
  description: data.summary,
  datePublished: `${data.year}-01-01`,
  url: `https://hackall360.github.io/projects/${project.slug}`,
  author: {
    '@type': 'Person',
    name: 'hackall360'
  },
  keywords: data.stack.join(', '),
  workExample: data.outcomes.map((outcome) => ({
    '@type': 'DefinedTerm',
    name: outcome
  }))
};
---
<BaseLayout title={pageTitle} description={pageDescription} structuredData={structuredData}>
  <section class="relative mx-auto flex w-full max-w-5xl flex-col gap-12 px-6 py-20">
    <nav aria-label="Breadcrumb" class="text-sm font-medium text-neutral-soft">
      <ol class="flex flex-wrap items-center gap-2">
        {breadcrumbs.map((crumb, index) => (
          <li class="inline-flex items-center gap-2">
            {index > 0 && <span aria-hidden="true" class="text-accent">/</span>}
            <a class="transition hover:text-accent-light" href={crumb.href}>
              {crumb.label}
            </a>
          </li>
        ))}
      </ol>
    </nav>

    <header class="space-y-6" data-motion-reveal data-motion-direction="up">
      <p class="text-sm font-semibold uppercase tracking-[0.35em] text-accent/80">Case study</p>
      <h1 class="text-4xl font-bold text-white sm:text-5xl">{data.title}</h1>
      <div class="flex flex-wrap items-center gap-4 text-sm text-neutral-soft">
        <span class="inline-flex items-center rounded-full border border-accent/30 bg-accent/10 px-3 py-1 font-semibold uppercase tracking-wide text-accent-light">
          {data.year}
        </span>
        <span class="text-neutral-emphasis">{data.role}</span>
      </div>
      <p class="max-w-3xl text-base text-neutral-soft sm:text-lg">{data.summary}</p>
      {data.links.length > 0 && (
        <div class="flex flex-wrap gap-3">
          {data.links.map((link, index) => (
            <a
              href={link.href}
              class={`inline-flex items-center justify-center rounded-full px-5 py-2 text-sm font-semibold transition duration-200 ease-spring-out focus-visible:outline-none ${
                index === 0
                  ? 'border border-transparent bg-accent text-slate-950 shadow-sm shadow-accent/30 hover:bg-accent-light'
                  : 'border border-accent/25 bg-surface-overlay/80 text-neutral-emphasis hover:border-accent hover:text-accent-light'
              }`}
              rel={link.href.startsWith('http') ? 'noopener noreferrer' : undefined}
            >
              {link.label}
            </a>
          ))}
        </div>
      )}
    </header>

    <div class="grid gap-10 lg:grid-cols-[minmax(0,1fr)_22rem]">
      <article class="prose prose-invert max-w-none prose-a:text-accent prose-strong:text-white prose-headings:text-white">
        <Content />
      </article>
      <aside class="space-y-8 rounded-3xl border border-accent/15 bg-surface-elevated/70 p-6 shadow-inner-terminal">
        <div>
          <h2 class="text-xs font-semibold uppercase tracking-wide text-neutral-soft">Outcomes</h2>
          <ul class="mt-4 space-y-3 text-sm text-neutral-soft" role="list">
            {data.outcomes.map((outcome) => (
              <li class="flex gap-3">
                <span aria-hidden="true" class="mt-1 size-1.5 rounded-full bg-accent-light shadow-[0_0_6px_rgba(34,211,238,0.7)]"></span>
                <span>{outcome}</span>
              </li>
            ))}
          </ul>
        </div>
        {data.stack.length > 0 && (
          <div>
            <h2 class="text-xs font-semibold uppercase tracking-wide text-neutral-soft">Stack</h2>
            <ul class="mt-4 flex flex-wrap gap-2" role="list">
              {data.stack.map((item) => (
                <li class="text-xs">
                  <span class="inline-flex items-center rounded-full border border-accent/25 bg-surface-overlay/80 px-3 py-1 text-[0.7rem] font-medium uppercase tracking-wide text-neutral-emphasis">
                    {item}
                  </span>
                </li>
              ))}
            </ul>
          </div>
        )}
      </aside>
    </div>
  </section>
</BaseLayout>
