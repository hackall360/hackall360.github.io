---
import BaseLayout from '~/layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import ProjectFilters from '~/components/ProjectFilters.astro';
import ProjectCard from '~/components/ProjectCard.astro';

const pageTitle = 'Projects | hackall360';
const pageDescription =
  "Explore hackall360's mix of AI experiments, security tooling, and full-stack prototypes.";

type WorkEntry = CollectionEntry<'work'>;
type Project = WorkEntry['data'] & { slug: string };

const entries = await getCollection('work');
const projects: Project[] = entries
  .map((entry) => ({
    ...entry.data,
    slug: entry.slug
  }))
  .sort((a, b) => b.year - a.year);

const tagGroups = new Map<string, number>();
for (const project of projects) {
  for (const tag of project.stack ?? []) {
    const key = tag.trim();
    tagGroups.set(key, (tagGroups.get(key) ?? 0) + 1);
  }
}
const availableTags = Array.from(tagGroups.keys()).sort();

const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'ItemList',
  name: 'hackall360 Projects',
  description: pageDescription,
  itemListElement: projects.map((project, index) => ({
    '@type': 'ListItem',
    position: index + 1,
    url: project.links[0]?.href ?? `/projects/${project.slug}`,
    name: project.title,
    description: project.summary
  }))
};
---
<BaseLayout title={pageTitle} description={pageDescription} structuredData={structuredData}>
  <section class="relative mx-auto flex w-full max-w-6xl flex-col gap-12 px-6 py-20">
    <header class="space-y-4 text-center sm:text-left" data-motion-reveal data-motion-direction="up">
      <p class="text-sm font-semibold uppercase tracking-[0.35em] text-accent/80">Projects</p>
      <h1 class="text-4xl font-bold text-white sm:text-5xl">Building in public</h1>
      <p class="text-base text-neutral-soft sm:text-lg">
        Browse experiments and long-running builds across AI, security, and full-stack playgrounds.
      </p>
    </header>

    <ProjectFilters tags={availableTags} />

    <div
      id="projects-grid"
      class="grid grid-cols-1 gap-6 sm:grid-cols-2 xl:grid-cols-3"
      data-motion-group
      data-motion-stagger="0.1"
      role="list"
      aria-live="polite"
    >
      {projects.map((project) => (
        <ProjectCard project={project} />
      ))}
    </div>

    <div
      id="projects-empty"
      class="hidden rounded-3xl border border-dashed border-accent/30 bg-surface-elevated/70 p-10 text-center text-neutral-emphasis"
      role="status"
      aria-live="polite"
    >
      <h2 class="text-xl font-semibold text-white">No projects match those tags yet</h2>
      <p class="mt-2 text-sm text-neutral-soft">
        Try relaxing your filters or jump into the full list of repositories on GitHub for even more builds.
      </p>
      <a
        class="mt-6 inline-flex items-center justify-center rounded-full border border-accent/40 bg-accent/10 px-6 py-3 text-sm font-semibold uppercase tracking-wide text-accent-light transition duration-200 ease-spring-out hover:bg-accent/20 focus-visible:outline-none"
        href="https://github.com/hackall360?tab=repositories"
        target="_blank"
        rel="noreferrer"
      >
        Explore GitHub
      </a>
    </div>
  </section>

  <script is:inline>
    const filterContainer = document.querySelector('[data-project-filters]');
    const grid = document.getElementById('projects-grid');
    const emptyState = document.getElementById('projects-empty');
    if (!filterContainer || !grid || !emptyState) {
      throw new Error('Projects page failed to initialize filters');
    }

    const cards = Array.from(
      grid.querySelectorAll('[data-project-card]')
    );

    const readActiveTags = () =>
      Array.from(
        filterContainer.querySelectorAll('button[data-tag][aria-pressed="true"]')
      )
        .map((button) => button.dataset.tag ?? '')
        .filter(Boolean);

    const scheduleFromDom = () => {
      const run = () => {
        updateVisibility(readActiveTags());
      };

      if (typeof queueMicrotask === 'function') {
        queueMicrotask(run);
      } else {
        setTimeout(run, 0);
      }
    };

    const updateVisibility = (activeTags) => {
      const normalized = activeTags.map((tag) => tag.toLowerCase());
      let visibleCount = 0;

      cards.forEach((card) => {
        const tags = (card.dataset.tags ?? '')
          .split(',')
          .map((tag) => tag.trim())
          .filter(Boolean);

        const isVisible =
          normalized.length === 0 ||
          normalized.every((tag) => tags.includes(tag));

        card.classList.toggle('hidden', !isVisible);
        card.setAttribute('tabindex', isVisible ? '0' : '-1');
        if (isVisible) {
          visibleCount += 1;
        }
      });

      if (visibleCount === 0) {
        emptyState.classList.remove('hidden');
        grid.setAttribute('aria-hidden', 'true');
      } else {
        emptyState.classList.add('hidden');
        grid.setAttribute('aria-hidden', 'false');
      }
    };

    filterContainer.addEventListener('filtersChange', (event) => {
      const detail = (event && 'detail' in event) ? event.detail : { activeTags: [] };
      const incoming = Array.isArray(detail.activeTags)
        ? detail.activeTags.map((tag) => `${tag}`)
        : [];
      updateVisibility(incoming);
    });

    filterContainer.addEventListener('click', (event) => {
      const target = event.target instanceof HTMLElement
        ? event.target.closest('button[data-tag], [data-clear-filters]')
        : null;

      if (!target) {
        return;
      }

      scheduleFromDom();
    });

    filterContainer.addEventListener('keydown', (event) => {
      if (event.key !== 'Enter' && event.key !== ' ') {
        return;
      }

      const target = event.target instanceof HTMLElement
        ? event.target.closest('button[data-tag], [data-clear-filters]')
        : null;

      if (!target) {
        return;
      }

      scheduleFromDom();
    });

    updateVisibility(readActiveTags());
  </script>
</BaseLayout>
